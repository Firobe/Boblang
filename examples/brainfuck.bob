Bob libob.nat
Bob libob.list
Bob libob.stream
Bob libob.print
Bob libob.read

Type tape = (nat * (STREAM(nat) * STREAM(nat)))

Declare zeros = FIX[STREAM(nat)](0s,
    CURRY2(STREAM_PUSH[nat], 0, lazy(0s))
)

Declare is_move_right = fun (c : nat) -> CURRY2(equal, c, 62)
Declare is_move_left = fun (c : nat) -> CURRY2(equal, c, 60)
Declare is_increment = fun (c : nat) -> CURRY2(equal, c, 43)
Declare is_decrement = fun (c : nat) -> CURRY2(equal, c, 45)
Declare is_output = fun (c : nat) -> CURRY2(equal, c, 46)
Declare is_input = fun (c : nat) -> CURRY2(equal, c, 44)
Declare is_jump_past = fun (c : nat) -> CURRY2(equal, c, 91)
Declare is_jump_back = fun (c : nat) -> CURRY2(equal, c, 93)

Declare move_right = fun (tape : tape) ->
    lets (cell, around) = tape in
    lets (sleft, sright) = around in
    let* sright = (STREAM_POP[nat] sright) in
    lets (new_cell, after) = sright in
    let* before = CURRY2(STREAM_PUSH[nat], cell, lazy(ret(sleft))) in
    ret((new_cell, (before, after)))

Declare move_left = fun (tape : tape) ->
    lets (cell, around) = tape in
    lets (sleft, sright) = around in
    let* sleft = (STREAM_POP[nat] sleft) in
    lets (new_cell, before) = sleft in
    let* after = CURRY2(STREAM_PUSH[nat], cell, lazy(ret(sright))) in
    ret((new_cell, (before, after)))

Declare jump_back = FIX[(nat -> (tape -> tape))](jump_back, ret(
    fun (stack : nat) -> ret(fun (prog : tape) ->
        lets (command, _) = prog in
        let* nprog = (move_left prog) in
        IFC((is_jump_past command),
            (* then *)
            IFC(CURRY2(equal, stack, 1),
                (* then *)
                ret(prog),
                (* else *)
                let* decr? = CURRY2(sub, stack, 1) in
                case decr? of
                    left(decr) -> REC_CALL2(jump_back, decr, nprog)
                    right(_) -> ret(nprog) (* error *)
            ),
            (* else *)
            IFC((is_jump_back command),
                (* then *)
                let* stack = (succ stack) in
                REC_CALL2(jump_back, stack, nprog)
                ,
                (* else *)
                REC_CALL2(jump_back, stack, nprog)
)))))
Declare jump_past = FIX[(nat -> (tape -> tape))](jump_past, ret(
    fun (stack : nat) -> ret(fun (prog : tape) ->
        lets (command, _) = prog in
        let* nprog = (move_right prog) in
        IFC((is_jump_back command),
            (* then *)
            IFC(CURRY2(equal, stack, 1),
                (* then *)
                ret(prog),
                (* else *)
                let* decr? = CURRY2(sub, stack, 1) in
                case decr? of
                    left(decr) -> REC_CALL2(jump_past, decr, nprog)
                    right(_) -> ret(nprog) (* error *)
            ),
            (* else *)
            IFC((is_jump_past command),
                (* then *)
                let* stack = (succ stack) in
                REC_CALL2(jump_past, stack, nprog)
                ,
                (* else *)
                REC_CALL2(jump_past, stack, nprog)
)))))
            
Declare process_char =
    fun (program : tape) -> ret(fun (tape : tape) -> ret(fun (c : nat) ->
        lets (cell, around) = tape in
        IFC((is_move_right c),
            let* t' = (move_right tape) in ret((t', program))
        ,IFC((is_move_left c),
            let* t' = (move_left tape) in ret((t', program))
        ,IFC((is_increment c),
            let* incr = (succ cell) in
            ret(((incr, around), program))
        ,IFC((is_decrement c),
            let* decr? = CURRY2(sub, cell, 1) in
            case decr? of
                left(decr) -> ret(((decr, around), program))
                right(_) -> ret((tape, program))
        ,IFC((is_output c),
            let* _ = (print_char cell) in
            ret((tape, program))
        ,IFC((is_input c),
            let* c? = (read_char) in
            case c? of
                left(c) -> ret(((c, around), program))
                right(_) -> ret((tape, program))
        ,IFC((is_jump_past c),
            let* cell = unfold(cell) in
            case cell of
                left(_) ->
                    let* program' = CURRY2(jump_past, 0, program) in
                    ret((tape, program'))
                right(_) -> ret((tape, program))
        ,IFC((is_jump_back c),
            let* cell = unfold(cell) in
            case cell of
                left(_) -> ret((tape, program))
                right(_) ->
                    let* program' = CURRY2(jump_back, 0, program) in
                    ret((tape, program'))
        ,ret((tape, program))))))))))
))

Declare push_to_stream = FIXFUN[(LIST(nat) -> STREAM(nat))](push_to_stream,
    fun (l : LIST(nat)) ->
        let* l = unfold(l) in
        case l of
            left(_) -> CURRY2(STREAM_PUSH[nat], 36, lazy(ret(zeros)))
            right(next) ->
                lets (head, tail) = next in
                let* str = REC_CALL(push_to_stream, tail) in
                CURRY2(STREAM_PUSH[nat], head, lazy(ret(str)))
)

Declare interpret = fun (_ : unit) ->
    let* program_l = (read_until 35) in
    let* program_s = (push_to_stream program_l) in
    let* program_full = ret((0, (zeros, program_s))) in
    (* Should filter out useless commands from program *)
    let* init_tape = ret((0, (zeros, zeros))) in
    let* _ = (print_char 36) in (* Signal that reading is done with a $ *)
    let* process = FIX[(tape -> (tape -> unit))](process, ret(
        fun (program : tape) -> ret(fun (tape : tape) ->
            lets (command, streams) = program in
            IFC(CURRY2(equal, command, 36), ret(()),
                let* res = CURRY3(process_char, program, tape, command) in
                lets (tape', program') = res in
                let* program'' = (move_right program') in
                REC_CALL2(process, program'', tape')
            )
    ))) in
    let* _ = CURRY2(process, program_full, init_tape) in
    (print_newline ())

Eval (interpret ())
