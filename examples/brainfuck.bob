Bob libob.nat
Bob libob.list
Bob libob.stream
Bob libob.print
Bob libob.read

Type tape = (nat * (STREAM(nat) * STREAM(nat)))

Declare zeros = FIX[STREAM(nat)](0s,
    CURRY2(STREAM_PUSH[nat], 0, lazy(0s))
)

Declare is_move_right = fun (c : nat) -> CURRY2(equal, c, 62)
Declare is_move_left = fun (c : nat) -> CURRY2(equal, c, 60)
Declare is_increment = fun (c : nat) -> CURRY2(equal, c, 43)
Declare is_decrement = fun (c : nat) -> CURRY2(equal, c, 45)
Declare is_output = fun (c : nat) -> CURRY2(equal, c, 46)
Declare is_input = fun (c : nat) -> CURRY2(equal, c, 44)
Declare is_jump_past = fun (c : nat) -> CURRY2(equal, c, 91)
Declare is_jump_back = fun (c : nat) -> CURRY2(equal, c, 93)

Declare move_right = fun (tape : tape) ->
    lets (cell, around) = tape in
    lets (sleft, sright) = around in
    let* sright = (STREAM_POP[nat] sright) in
    lets (new_cell, after) = sright in
    let* before = CURRY2(STREAM_PUSH[nat], cell, lazy(ret(sleft))) in
    ret((new_cell, (before, after)))

Declare move_left = fun (tape : tape) ->
    lets (cell, around) = tape in
    lets (sleft, sright) = around in
    let* sleft = (STREAM_POP[nat] sleft) in
    lets (new_cell, before) = sleft in
    let* after = CURRY2(STREAM_PUSH[nat], cell, lazy(ret(sright))) in
    ret((new_cell, (before, after)))

(* Highly unoptimised because of LIST_NTH ! *)
Declare jump_back = fun (prog : LIST(nat)) ->
    FIX[(nat -> (nat -> nat))](jump_back, ret(
        fun (pos : nat) -> ret(fun (stack : nat) ->
            let* npos =
                let* pos = unfold(pos) in
                case pos of
                    left(_) -> ret(0)
                    right(pos') -> ret(pos')
            in
            let* command? = REC_CALL2(LIST_NTH[nat], pos, prog) in
            case command? of
                left(command) ->
                    IFC((is_jump_past command),
                        (* then *)
                        IFC(CURRY2(equal, stack, 1),
                            (* then *)
                            ret(pos),
                            (* else *)
                            let* decr? = CURRY2(sub, stack, 1) in
                            case decr? of
                                left(decr) -> REC_CALL2(jump_back, npos, decr)
                                right(_) -> ret(0) (* error *)
                        ),
                        (* else *)
                        IFC((is_jump_back command),
                            (* then *)
                            let* stack = (succ stack) in
                            REC_CALL2(jump_back, npos, stack)
                            ,
                            (* else *)
                            REC_CALL2(jump_back, npos, stack)
                        )
                    )
                right(_) -> ret(pos) (* error *)
)))

Declare jump_past = fun (prog : LIST(nat)) ->
    FIX[(nat -> (nat -> nat))](jump_back, ret(
        fun (pos : nat) -> ret(fun (stack : nat) ->
            let* npos = (succ pos) in
            let* command? = REC_CALL2(LIST_NTH[nat], pos, prog) in
            case command? of
                left(command) ->
                    IFC((is_jump_back command),
                        (* then *)
                        IFC(CURRY2(equal, stack, 1),
                            (* then *)
                            ret(pos),
                            (* else *)
                            let* decr? = CURRY2(sub, stack, 1) in
                            case decr? of
                                left(decr) -> REC_CALL2(jump_back, npos, decr)
                                right(_) -> ret(0) (* error *)
                        ),
                        (* else *)
                        IFC((is_jump_past command),
                            (* then *)
                            let* stack = (succ stack) in
                            REC_CALL2(jump_back, npos, stack)
                            ,
                            (* else *)
                            REC_CALL2(jump_back, npos, stack)
                        )
                    )
                right(_) -> ret(pos) (* error *)
)))

Declare process_char =
    fun (program : LIST(nat)) -> ret(fun (pos : (tape * nat)) -> ret(fun (c : nat) ->
        lets (tape, pc) = pos in
        lets (cell, around) = tape in
        IFC((is_move_right c),
            let* t' = (move_right tape) in ret((t', pc))
        ,IFC((is_move_left c),
            let* t' = (move_left tape) in ret((t', pc))
        ,IFC((is_increment c),
            let* incr = (succ cell) in
            ret(((incr, around),pc))
        ,IFC((is_decrement c),
            let* decr? = CURRY2(sub, cell, 1) in
            case decr? of
                left(decr) -> ret(((decr, around), pc))
                right(_) -> ret(pos)
        ,IFC((is_output c),
            let* _ = (print_char cell) in
            ret(pos)
        ,IFC((is_input c),
            let* c? = (read_char) in
            case c? of
                left(c) -> ret(((c, around), pc))
                right(_) -> ret(pos)
        ,IFC((is_jump_past c),
            let* cell = unfold(cell) in
            case cell of
                left(_) ->
                    let* pc' = CURRY3(jump_past, program, pc, 0) in
                    ret((tape, pc'))
                right(_) -> ret(pos)
        ,IFC((is_jump_back c),
            let* cell = unfold(cell) in
            case cell of
                left(_) -> ret(pos)
                right(_) ->
                    let* pc' = CURRY3(jump_back, program, pc, 0) in
                    ret((tape, pc'))
        ,ret(pos)))))))))
))

Declare interpret = fun (_ : unit) ->
    let* program = (read_until 35) in
    (* Should filter out useless commands from program *)
    let* init_tape = ret((0, (zeros, zeros))) in
    let* _ = (print_char 36) in (* Signal that reading is done with a $ *)
    let* process = FIX[(nat -> (tape -> unit))](process, ret(
        fun (pc : nat) -> ret(fun (tape : tape) ->
            let* command? = REC_CALL2(LIST_NTH[nat], pc, program) in
            case command? of
                left(command) ->
                    let* res = CURRY3(process_char, program, (tape, pc), command) in
                    lets (tape', pc') = res in
                    let* incr = (succ pc') in
                    REC_CALL2(process, incr, tape')
                right(command) -> ret(())
    ))) in
    let* _ = CURRY2(process, 0, init_tape) in
    (print_newline ())

Eval (interpret ())
