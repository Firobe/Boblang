Bob libob.recursion
Bob libob.nat
Bob libob.list
Bob libob.print

(* ================ STREAMS ==================== *)

Typemacro STREAM tau = rec(stream, (tau * lazy(stream)))

Macro STREAM_PUSH [tau] =
    fun (x : tau) -> ret (
        fun (s : lazy(STREAM(tau))) -> ret (
            fold[STREAM(tau)]((x, s))
        )
    )

Macro STREAM_POP [tau] = fun (s : STREAM(tau)) ->
    let* c = unfold(s) in
    lets (x, rest) = c in
    let* next = force(rest) in
    ret((x, next))

Macro STREAM_TAKE [tau] = FIX[(nat -> (STREAM(tau) -> LIST(tau)))](take,
ret(
    fun (n : nat) -> ret (
        fun (str : STREAM(tau)) ->
            let* n' = unfold(n) in
            case n' of
                left(_) -> ret(NIL[tau])
                right(e) ->
                    let* s' = (STREAM_POP[tau] str) in
                    lets (x, rest) = s' in 
                    let* res = REC_CALL2(take, e, rest) in
                    CURRY2(CONS[tau], x, res)
        )
    )
)

Macro STREAM_MAP [tau] = FIX[((tau -> tau) -> (STREAM(tau) -> STREAM(tau)))](map,
ret(
    fun (f : (tau -> tau)) -> ret(
        fun (s : STREAM(tau)) ->
            let* s' = (STREAM_POP[tau] s) in
            lets (x, rest) = s' in
            let* push_new = C((STREAM_PUSH[tau] _), (f x)) in
            let* rec_map = REC_CALL(map, f) in
            (push_new lazy((rec_map rest)))
    )
))

Macro STREAM_INTERLACE [tau] = FIX[(STREAM(tau) -> (STREAM(tau) -> STREAM(tau)))](merge,
ret (
    fun (s1 : STREAM(tau)) -> ret (
        fun (s2 : STREAM(tau)) ->
            let* s1' = (STREAM_POP[tau] s1) in
            let* s2' = (STREAM_POP[tau] s2) in
            lets (x1, rest1) = s1' in
            lets (x2, rest2) = s2' in
            let* frec' = REC_CALL(merge, rest1) in
            let* push' = (STREAM_PUSH[tau] x2) in
            let* push''' = (STREAM_PUSH[tau] x1) in
            (push''' lazy((push' lazy((frec' rest2)))))
    )
))


Macro STREAM_PRINT [tau] s n printer =
    let* ext = REC_CALL2(STREAM_TAKE[nat], n, s) in
    let* _ = REC_CALL2(LIST_ITER[nat], printer, ext) in
    (print_newline ())
