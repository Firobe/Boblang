Bob libob.recursion
Bob libob.maybe
Bob libob.bool

Type nat = rec(n, (unit + n))
Declare 0 = fold[nat](left[(unit + nat)](()))
Declare succ = fun (x : nat) -> ret (fold[nat](right[(unit + nat)](x)))

(* Addition *)
Declare add = FIX[(nat -> (nat -> nat))](add, ret(
    fun (n1 : nat) -> ret(fun (n2 : nat) ->
        let* n1' = unfold(n1) in
        case n1' of
            left(_) -> ret(n2)
            right(n1'') ->
                let* n2' = (succ n2) in
                REC_CALL2(add, n1'', n2')
)))

(* Mutiplication *)
Declare mult = FIX[(nat -> (nat -> nat))](mult, ret(
    fun (n1 : nat) -> ret(fun (n2 : nat) ->
        let* n1' = unfold(n1) in
        case n1' of
            left(_) -> ret(0)
            right(n1'') ->
                C(CURRY2(add, n2, _), REC_CALL2(mult, n1'', n2))
)))

(* Subtraction *)
Declare sub = FIX[(nat -> (nat -> MAYBE(nat)))](sub, ret(
    fun (n1 : nat) -> ret(fun (n2 : nat) ->
        let* n2' = unfold(n2) in
        case n2' of
            left(_) (*zero*) -> ret(SOME[nat](n1))
            right(n2'') ->
                let* n1' = unfold(n1) in
                case n1' of
                    left(_) (* n1 < n2 *) -> ret(NONE[nat])
                    right(n1'') -> REC_CALL2(sub, n1'', n2'')
)))

Declare equal = fun (n1 : nat) -> ret(fun (n2 : nat) ->
    let* sub = CURRY2(sub, n1, n2) in
    case sub of
        left(n) (* some *) ->
            let* n = unfold(n) in
            case n of
                left(_) (* zero *) -> ret(true)
                right(_) -> ret(false)
        right(_) (* none *) -> ret(false)
)


(* >= *)
Declare geq = fun (n1 : nat) -> ret(fun (n2 : nat) ->
    let* res = CURRY2(sub, n1, n2) in
    case res of
        left(_) (*some*) -> ret(true)
        right(_) (*none*) -> ret(false)
)
(* < *)
Declare lt = fun (n1 : nat) -> ret(fun (n2 : nat) ->
    let* geq? = CURRY2(geq, n1, n2) in
    (not geq?)
)

(* Euclidian division (division on 0 will loop indefinitely) *)
Declare eucdiv = fun (n1 : nat) -> ret(fun (n2 : nat) ->
    let* aux = FIX[(nat -> (nat -> (nat * nat)))](aux, ret(
        fun (rem : nat) -> ret(fun (res : nat) ->
            let* sub? = CURRY2(sub, rem, n2) in
            case sub? of
                left(next) (* some *) ->
                    let* nres = (succ res) in
                    REC_CALL2(aux, next, nres)
                right(_) (* none *) -> ret((rem, res))
    ))) in CURRY2(aux, n1, 0))

(* Division quotient *)
Declare div = fun (n1 : nat) -> ret(fun (n2 : nat) ->
    let* dres = CURRY2(eucdiv, n1, n2) in
    lets (_, res) = dres in ret(res)
)
(* Remainder *)
Declare mod = fun (n1 : nat) -> ret(fun (n2 : nat) ->
    let* dres = CURRY2(eucdiv, n1, n2) in
    lets (mod, _) = dres in ret(mod)
)

(* Some common numbers *)
Declare 1 = (succ 0)
Declare 2 = (succ 1)
Declare 3 = (succ 2)
Declare 4 = (succ 3)
Declare 5 = (succ 4)
Declare 6 = (succ 5)
Declare 7 = (succ 6)
Declare 8 = (succ 7)
Declare 9 = (succ 8)
Declare 10 = (succ 9)
Declare 11 = (succ 10)
Declare 12 = (succ 11)
Declare 13 = (succ 12)
Declare 14 = (succ 13)
Declare 15 = (succ 14)
Declare 16 = (succ 15)
Declare 17 = (succ 16)
Declare 18 = (succ 17)
Declare 19 = (succ 18)
Declare 20 = (succ 19)
Declare 21 = (succ 20)
Declare 22 = (succ 21)
Declare 23 = (succ 22)
Declare 24 = (succ 23)
Declare 25 = (succ 24)
Declare 26 = (succ 25)
Declare 27 = (succ 26)
Declare 28 = (succ 27)
Declare 29 = (succ 28)
Declare 30 = (succ 29)
Declare 31 = (succ 30)
Declare 32 = (succ 31)
Declare 33 = (succ 32)
Declare 34 = (succ 33)
Declare 35 = (succ 34)
Declare 36 = (succ 35)
Declare 37 = (succ 36)
Declare 38 = (succ 37)
Declare 39 = (succ 38)
Declare 40 = (succ 39)
Declare 41 = (succ 40)
Declare 42 = (succ 41)
Declare 43 = (succ 42)
Declare 44 = (succ 43)
Declare 45 = (succ 44)
Declare 46 = (succ 45)
Declare 47 = (succ 46)
Declare 48 = (succ 47)
Declare 49 = (succ 48)
Declare 50 = (succ 49)
Declare 51 = (succ 50)
Declare 52 = (succ 51)
Declare 53 = (succ 52)
Declare 54 = (succ 53)
Declare 55 = (succ 54)
Declare 56 = (succ 55)
Declare 57 = (succ 56)
Declare 58 = (succ 57)
Declare 59 = (succ 58)
Declare 60 = (succ 59)
Declare 61 = (succ 60)
Declare 62 = (succ 61)
Declare 63 = (succ 62)
Declare 64 = (succ 63)
Declare 65 = (succ 64)
Declare 66 = (succ 65)
Declare 67 = (succ 66)
Declare 68 = (succ 67)
Declare 69 = (succ 68)
Declare 70 = (succ 69)
Declare 71 = (succ 70)
Declare 72 = (succ 71)
Declare 73 = (succ 72)
Declare 74 = (succ 73)
Declare 75 = (succ 74)
Declare 76 = (succ 75)
Declare 77 = (succ 76)
Declare 78 = (succ 77)
Declare 79 = (succ 78)
Declare 80 = (succ 79)
Declare 81 = (succ 80)
Declare 82 = (succ 81)
Declare 83 = (succ 82)
Declare 84 = (succ 83)
Declare 85 = (succ 84)
Declare 86 = (succ 85)
Declare 87 = (succ 86)
Declare 88 = (succ 87)
Declare 89 = (succ 88)
Declare 90 = (succ 89)
Declare 91 = (succ 90)
Declare 92 = (succ 91)
Declare 93 = (succ 92)
Declare 94 = (succ 93)
Declare 95 = (succ 94)
Declare 96 = (succ 95)
Declare 97 = (succ 96)
Declare 98 = (succ 97)
Declare 99 = (succ 98)
Declare 100 = (succ 99)
Declare 101 = (succ 100)
Declare 102 = (succ 101)
Declare 103 = (succ 102)
Declare 104 = (succ 103)
Declare 105 = (succ 104)
Declare 106 = (succ 105)
Declare 107 = (succ 106)
Declare 108 = (succ 107)
Declare 109 = (succ 108)
Declare 110 = (succ 109)
Declare 111 = (succ 110)
Declare 112 = (succ 111)
Declare 113 = (succ 112)
Declare 114 = (succ 113)
Declare 115 = (succ 114)
Declare 116 = (succ 115)
Declare 117 = (succ 116)
Declare 118 = (succ 117)
Declare 119 = (succ 118)
Declare 120 = (succ 119)
Declare 121 = (succ 120)
Declare 122 = (succ 121)
Declare 123 = (succ 122)
Declare 124 = (succ 123)
Declare 125 = (succ 124)
Declare 126 = (succ 125)
Declare 127 = (succ 126)

Declare 128 = (succ 127)
Declare 129 = (succ 128)
Declare 130 = (succ 129)
Declare 131 = (succ 130)
Declare 132 = (succ 131)
Declare 133 = (succ 132)
Declare 134 = (succ 133)
Declare 135 = (succ 134)
Declare 136 = (succ 135)
Declare 137 = (succ 136)
Declare 138 = (succ 137)
Declare 139 = (succ 138)
Declare 140 = (succ 139)
Declare 141 = (succ 140)
Declare 142 = (succ 141)
Declare 143 = (succ 142)
Declare 144 = (succ 143)
Declare 145 = (succ 144)
Declare 146 = (succ 145)
Declare 147 = (succ 146)
Declare 148 = (succ 147)
Declare 149 = (succ 148)
Declare 150 = (succ 149)
Declare 151 = (succ 150)
Declare 152 = (succ 151)
Declare 153 = (succ 152)
Declare 154 = (succ 153)
Declare 155 = (succ 154)
Declare 156 = (succ 155)
Declare 157 = (succ 156)
Declare 158 = (succ 157)
Declare 159 = (succ 158)
Declare 160 = (succ 159)
Declare 161 = (succ 160)
Declare 162 = (succ 161)
Declare 163 = (succ 162)
Declare 164 = (succ 163)
Declare 165 = (succ 164)
Declare 166 = (succ 165)
Declare 167 = (succ 166)
Declare 168 = (succ 167)
Declare 169 = (succ 168)
Declare 170 = (succ 169)
Declare 171 = (succ 170)
Declare 172 = (succ 171)
Declare 173 = (succ 172)
Declare 174 = (succ 173)
Declare 175 = (succ 174)
Declare 176 = (succ 175)
Declare 177 = (succ 176)
Declare 178 = (succ 177)
Declare 179 = (succ 178)
Declare 180 = (succ 179)
Declare 181 = (succ 180)
Declare 182 = (succ 181)
Declare 183 = (succ 182)
Declare 184 = (succ 183)
Declare 185 = (succ 184)
Declare 186 = (succ 185)
Declare 187 = (succ 186)
Declare 188 = (succ 187)
Declare 189 = (succ 188)
Declare 190 = (succ 189)
Declare 191 = (succ 190)
Declare 192 = (succ 191)
Declare 193 = (succ 192)
Declare 194 = (succ 193)
Declare 195 = (succ 194)
Declare 196 = (succ 195)
Declare 197 = (succ 196)
Declare 198 = (succ 197)
Declare 199 = (succ 198)
Declare 200 = (succ 199)
Declare 201 = (succ 200)
Declare 202 = (succ 201)
Declare 203 = (succ 202)
Declare 204 = (succ 203)
Declare 205 = (succ 204)
Declare 206 = (succ 205)
Declare 207 = (succ 206)
Declare 208 = (succ 207)
Declare 209 = (succ 208)
Declare 210 = (succ 209)
Declare 211 = (succ 210)
Declare 212 = (succ 211)
Declare 213 = (succ 212)
Declare 214 = (succ 213)
Declare 215 = (succ 214)
Declare 216 = (succ 215)
Declare 217 = (succ 216)
Declare 218 = (succ 217)
Declare 219 = (succ 218)
Declare 220 = (succ 219)
Declare 221 = (succ 220)
Declare 222 = (succ 221)
Declare 223 = (succ 222)
Declare 224 = (succ 223)
Declare 225 = (succ 224)
Declare 226 = (succ 225)
Declare 227 = (succ 226)
Declare 228 = (succ 227)
Declare 229 = (succ 228)
Declare 230 = (succ 229)
Declare 231 = (succ 230)
Declare 232 = (succ 231)
Declare 233 = (succ 232)
Declare 234 = (succ 233)
Declare 235 = (succ 234)
Declare 236 = (succ 235)
Declare 237 = (succ 236)
Declare 238 = (succ 237)
Declare 239 = (succ 238)
Declare 240 = (succ 239)
Declare 241 = (succ 240)
Declare 242 = (succ 241)
Declare 243 = (succ 242)
Declare 244 = (succ 243)
Declare 245 = (succ 244)
Declare 246 = (succ 245)
Declare 247 = (succ 246)
Declare 248 = (succ 247)
Declare 249 = (succ 248)
Declare 250 = (succ 249)
Declare 251 = (succ 250)
Declare 252 = (succ 251)
Declare 253 = (succ 252)
Declare 254 = (succ 253)
Declare 255 = (succ 254)
Declare 256 = (succ 255)
