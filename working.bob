Type nat = rec(t, (1 + t))
Declare zero = fold[nat](left[(1 + nat)](()))
Declare succ = fun (x : nat) -> ret (fold[nat](right[(1 + nat)](x)))

Declare two = comp(
    letr one = comp((succ . zero)) in (succ . one)
)

Declare minus_one = fun (i : nat) ->
     letr unpacked = comp(unfold(i)) in
     case unpacked of
         left(_) -> ret(zero)
         right(pred) -> ret(pred)

Eval letr twu = two in (minus_one . twu)
